"""Fully migrate configuration to database

Revision ID: 87c423870cc9
Revises: cf949e08cf67
Create Date: 2025-07-16 05:09:34.080882

Notes on migration: apply the migration
THEN remove the configuration file from
both the system and the docker compose!

"""
import toml
import json
import os
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
import sqlmodel.sql.sqltypes
import fastapi_users_db_sqlalchemy
import resonite_communities




# revision identifiers, used by Alembic.
revision: str = '87c423870cc9'
down_revision: Union[str, None] = 'cf949e08cf67'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None

def migrate_configuration_to_db():

    with Session(bind=op.get_bind()) as session:

        toml_file = 'config.toml'
        if os.path.exists(toml_file):
            with open(toml_file, 'r') as f:
                toml_config = toml.load(f)

            infrastructure_keys = {
                'DATABASE_URL',
                'CACHE_URL',
                'SECRET_KEY',
                'Discord',
                'SENTRY_DSN',
            }

            app_config_data = {}
            for key, value in toml_config.items():
                if key in infrastructure_keys:
                    continue

                if key == 'MONITORED_DOMAINS':
                    for domain_config in value:
                        session.execute(
                            sa.text("INSERT INTO monitored_domains (url, status) VALUES (:url, :status)"),
                            {'url': domain_config['url'], 'status': domain_config['status']}
                        )
                    continue

                if key == 'Twitch':
                    session.execute(
                        sa.text("""
                            INSERT INTO twitch_config
                                (client_id, secret, game_id, account_name)
                                VALUES (:client_id, :secret, :game_id, :account_name)
                        """),
                        {
                            'client_id': value['client_id'],
                            'secret': value['secret'],
                            'game_id': value['game_id'],
                            'account_name': value['account_name'],
                        }
                    )
                    continue

                field_mapping = {
                    'DISCORD_BOT_TOKEN': 'discord_bot_token',
                    'AD_DISCORD_BOT_TOKEN': 'ad_discord_bot_token',
                    'REFRESH_INTERVAL': 'REFRESH_INTERVAL',
                    'CLOUDVAR_RESONITE_USER': 'CLOUDVAR_RESONITE_USER',
                    'CLOUDVAR_RESONITE_PASS': 'CLOUDVAR_RESONITE_PASS',
                    'CLOUDVAR_BASE_NAME': 'CLOUDVAR_BASE_NAME',
                    'CLOUDVAR_GENERAL_NAME': 'CLOUDVAR_GENERAL_NAME',
                    'FACET_URL': 'FACET_URL',
                }

                if key in field_mapping:
                    db_field = field_mapping[key]
                    app_config_data[db_field] = value

            if app_config_data:
                columns = ', '.join(app_config_data.keys())
                placeholders = ', '.join(f':{k}' for k in app_config_data.keys())
                session.execute(
                    sa.text(f"INSERT INTO app_config ({columns}) VALUES ({placeholders})"),
                    app_config_data
                )

            session.commit()
            print("Config migration completed successfully")
        else:
            print("No config.toml found, skipping data migration")

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('app_config',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('discord_bot_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('ad_discord_bot_token', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('refresh_interval', sa.Integer(), nullable=False),
        sa.Column('cloudvar_resonite_user', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('cloudvar_resonite_pass', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('cloudvar_base_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('cloudvar_general_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('facet_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_table('monitored_domains',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('url', sqlmodel.sql.sqltypes.AutoString(length=255), nullable=False),
        sa.Column('status', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('url')
    )
    op.create_table('twitch_config',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('client_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('secret', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('game_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column('account_name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    migrate_configuration_to_db()

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('twitch_config')
    op.drop_table('monitored_domains')
    op.drop_table('app_config')
    # ### end Alembic commands ###
