services:
  database_community:
    image: postgres:16
    profiles:
      - database
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=changeme
      - POSTGRES_USER=resonitecommunities
      - POSTGRES_DB=resonitecommunities
    volumes:
      - ../../data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U resonitecommunities"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    networks:
      - shared_backend_network

  migrations_community:
    build: ../..
    env_file:
      - ../../env.d/community.env
    command: >
      /bin/bash -c "
      poetry run alembic upgrade head;
      EXIT_CODE=$?;
      if [ $EXIT_CODE -ne 0 ]; then
        echo 'Alembic migration failed with exit code' $EXIT_CODE;
        exit $EXIT_CODE;
      fi
      "
    volumes:
      - "../../resonite_communities:/app/resonite_communities"
      - "../../migrations:/app/migrations"
    depends_on:
      database_community:
        condition: service_healthy
    profiles:
      - manager
      - client
    networks:
      - shared_backend_network

  signals_manager_community:
    build: ../..
    env_file:
      - ../../env.d/community.env
    restart: always
    command: poetry run signals_manager --reload
    profiles:
      - manager
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    volumes:
      - "../../resonite_communities:/app/resonite_communities"
    networks:
      - shared_backend_network

  api_client_community:
    build: ../..
    env_file:
      - ../../env.d/community.env
    restart: always
    profiles:
      - client
    command: poetry run api_client --reload
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    volumes:
      - "../../resonite_communities:/app/resonite_communities"
    ports:
      - '8000:8000'
    networks:
      - shared_backend_network
    labels:
      - traefik.enable=true

      # CORS middleware
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Origin=*
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Methods=*
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Headers=*

      # Modern API route
      - traefik.http.routers.api_client_community.rule=Host(`resonite-communities.local`) && PathPrefix(`/api`)
      - traefik.http.routers.api_client_community.entrypoints=web

      # Private events legacy API v1 route
      - traefik.http.routers.api_v1_client_legacy_private_community.rule=Host(`private.resonite-communities.local`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_private_community.entrypoints=web

      # Private events legacy API v1 route 2
      - traefik.http.routers.api_v1_client_legacy_private2_community.rule=Host(`3rd.private.resonite-communities.local`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_private2_community.entrypoints=web

      # Public events legacy API v1 route
      - traefik.http.routers.api_v1_client_legacy_public_community.rule=Host(`resonite-communities.local`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_public_community.entrypoints=web

      # Public events legacy API v1 route 2
      - traefik.http.routers.api_v1_client_legacy_public2_community.rule=Host(`3rd.resonite-communities.local`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_public2_community.entrypoints=web

      # Public events legacy API v2 route
      - traefik.http.routers.api_v2_client_legacy_public_community.rule=Host(`resonite-communities.local`) && PathPrefix(`/v2`)
      - traefik.http.routers.api_v2_client_legacy_public_community.entrypoints=web
      - traefik.http.routers.api_v2_client_legacy_public_community.middlewares=cors

  web_client_community:
    build: ../..
    env_file:
      - ../../env.d/community.env
    restart: always
    profiles:
      - client
    command: poetry run web_client --reload
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    volumes:
      - "../../resonite_communities:/app/resonite_communities"
    ports:
      - '8001:8001'
    networks:
      - shared_backend_network
    labels:
      - traefik.enable=true

      - traefik.http.routers.web_client_community.rule=Host(`resonite-communities.local`)
      - traefik.http.routers.web_client_community.entrypoints=web

      # Public events legacy API route
      - traefik.http.routers.web_client_legacy_public_community.rule=Host(`3rd.resonite-communities.local`)
      - traefik.http.routers.web_client_legacy_public_community.entrypoints=web

  mkdocs_community:
    build:
      context: ../..
      dockerfile: Dockerfile.mkdocs
    ports:
      - "8002:8000"
    networks:
      - shared_backend_network
    profiles:
      - doc
    stdin_open: true
    tty: true
    labels:
      - traefik.enable=true
      - traefik.http.routers.docs.rule=Host(`docs.resonite-communities.local`)
      - traefik.http.routers.docs.entrypoints=web

    volumes:
      - "../../docs:/docs"

networks:
  shared_backend_network:
    external: true
