services:

  traefik:
    image: traefik:v3.3
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.prod_web.forwardedHeaders.insecure"
      - "--entryPoints.prod_web.address=:80"
      - "--accesslog=true"
    ports:
      - "81:80"
      - "8081:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  database:
    image: postgres:16
    profiles:
      - database
    restart: unless-stopped
    ports:
      - 5433:5432
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user)"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  migrations:
    build: ../..
    command: >
      /bin/bash -c "
      poetry run alembic upgrade head;
      EXIT_CODE=$?;
      if [ $EXIT_CODE -ne 0 ]; then
        echo 'Alembic migration failed with exit code' $EXIT_CODE;
        exit $EXIT_CODE;
      fi
      "
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    depends_on:
      database:
        condition: service_healthy
    profiles:
      - manager
      - client

  signals_manager:
    build: ../..
    restart: always
    command: poetry run signals_manager
    profiles:
      - manager
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    depends_on:
      migrations:
        condition: service_completed_successfully
      database:
        condition: service_healthy

  api_client:
    build: ../..
    restart: always
    profiles:
      - client
    command: poetry run api_client
    depends_on:
      migrations:
        condition: service_completed_successfully
      database:
        condition: service_healthy
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.services.prod_api_client.loadbalancer.server.port=8000

      # CORS middleware
      - traefik.http.middlewares.prod_cors.headers.customresponseheaders.Access-Control-Allow-Origin=*
      - traefik.http.middlewares.prod_cors.headers.customresponseheaders.Access-Control-Allow-Methods=*
      - traefik.http.middlewares.prod_cors.headers.customresponseheaders.Access-Control-Allow-Headers=*

      # Modern API route
      - traefik.http.routers.prod_api_client.rule=Host(`resonite-communities.com`) && PathPrefix(`/api`)
      - traefik.http.routers.prod_api_client.entrypoints=prod_web
      - traefik.http.routers.prod_api_client.middlewares=prod_cors

      # Private events legacy API v1 route
      - traefik.http.routers.prod_api_v1_client_legacy_private.rule=Host(`adult.resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.prod_api_v1_client_legacy_private.entrypoints=prod_web
      - traefik.http.routers.prod_api_v1_client_legacy_private.middlewares=prod_cors

      # Private events legacy API v2 route
      - traefik.http.routers.prod_api_v2_client_legacy_private.rule=Host(`adult.resonite-communities.com`) && PathPrefix(`/v2`)
      - traefik.http.routers.prod_api_v2_client_legacy_private.entrypoints=prod_web
      - traefik.http.routers.prod_api_v2_client_legacy_private.middlewares=prod_cors

      # Private events legacy API v1 route 2
      - traefik.http.routers.prod_api_v1_client_legacy_private2.rule=Host(`adult-events.resonite.boltwolf.net`) && PathPrefix(`/v1`)
      - traefik.http.routers.prod_api_v1_client_legacy_private2.entrypoints=prod_web
      - traefik.http.routers.prod_api_v1_client_legacy_private2.middlewares=prod_cors

      # Public events legacy API v1 route
      - traefik.http.routers.prod_api_v1_client_legacy_public.rule=Host(`resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.prod_api_v1_client_legacy_public.entrypoints=prod_web
      - traefik.http.routers.prod_api_v1_client_legacy_public.middlewares=prod_cors

      # Public events legacy API v1 route 2
      - traefik.http.routers.prod_api_v1_client_legacy_public2.rule=Host(`events.resonite.boltwolf.net`) && PathPrefix(`/v1`)
      - traefik.http.routers.prod_api_v1_client_legacy_public2.entrypoints=prod_web
      - traefik.http.routers.prod_api_v1_client_legacy_public2.middlewares=prod_cors

      # Public events legacy API v2 route
      - traefik.http.routers.prod_api_v2_client_legacy_public.rule=Host(`resonite-communities.com`) && PathPrefix(`/v2`)
      - traefik.http.routers.prod_api_v2_client_legacy_public.entrypoints=prod_web
      - traefik.http.routers.prod_api_v2_client_legacy_public.middlewares=prod_cors




  web_client:
    build: ../..
    restart: always
    profiles:
      - client
    command: poetry run web_client
    depends_on:
      migrations:
        condition: service_completed_successfully
      database:
        condition: service_healthy
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.services.prod_web_client.loadbalancer.server.port=8001

      - traefik.http.routers.prod_web_client.rule=Host(`resonite-communities.com`)
      - traefik.http.routers.prod_web_client.entrypoints=prod_web

      # Private events legacy API route 2
      - traefik.http.routers.web_client_legacy_public.rule=Host(`events.resonite.boltwolf.net`)
      - traefik.http.routers.web_client_legacy_public.entrypoints=prod_web

  mkdocs:
    build:
      context: ../..
      dockerfile: Dockerfile.mkdocs
    ports:
      - "9002:8000"
    profiles:
      - doc
    stdin_open: true
    tty: true
    labels:
      - traefik.enable=true
      - traefik.http.routers.docs.rule=Host(`docs.resonite-communities.com`)
      - traefik.http.routers.docs.entrypoints=prod_web

  cache:
    image: redis:7.0-alpine
    restart: always
    command: redis-server --save ""

secrets:
  postgres_password:
    environment: POSTGRES_PASSWORD
  postgres_user:
    environment: POSTGRES_USER
  postgres_db:
    environment: POSTGRES_DB
  database_url:
    environment: DATABASE_URL
  discord_secret:
    environment: DISCORD_SECRET
  secret:
    environment: SECRET
  secret_key:
    environment: SECRET_KEY
  sentry_dsn:
    environment: SENTRY_DSN

volumes:
  postgres_data:
    driver: local