services:

  traefik_community:
    image: traefik:v3.3
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  database_community:
    image: postgres:16
    profiles:
      - database
    restart: unless-stopped
    ports:
      - 5432:5432
    secrets:
      - postgres_password
      - postgres_user
      - postgres_db
    environment:
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_DB_FILE=/run/secrets/postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$(cat /run/secrets/postgres_user)"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s

  migrations_community:
    build: ../..
    command: >
      /bin/bash -c "
      poetry run alembic upgrade head;
      EXIT_CODE=$?;
      if [ $EXIT_CODE -ne 0 ]; then
        echo 'Alembic migration failed with exit code' $EXIT_CODE;
        exit $EXIT_CODE;
      fi
      "
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    depends_on:
      database_community:
        condition: service_healthy
    profiles:
      - manager
      - api_client

  signals_manager_community:
    build: ../..
    restart: always
    command: poetry run signals_manager
    profiles:
      - manager
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}

  api_client_community:
    build: ../..
    restart: always
    profiles:
      - client
    command: poetry run api_client
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    ports:
      - '8000:8000'
    volumes:
      - dev_eventsresonite_certs_shared:/certs_shared:ro
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - REQUESTS_CA_BUNDLE=/certs_shared/official.crt
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    labels:
      - traefik.enable=true

      # CORS middleware
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Origin=*
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Methods=*
      - traefik.http.middlewares.cors.headers.customresponseheaders.Access-Control-Allow-Headers=*

      # Modern API route
      - traefik.http.routers.api_client_community.rule=Host(`dev.resonite-communities.com`) && PathPrefix(`/api`)
      - traefik.http.routers.api_client_community.entrypoints=web

      # Private events legacy API v1 route
      - traefik.http.routers.api_v1_client_legacy_private_community.rule=Host(`adult.dev.resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_private_community.entrypoints=web

      # Private events legacy API v1 route 2
      - traefik.http.routers.api_v1_client_legacy_private2_community.rule=Host(`3rd.adult.dev.resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_private2_community.entrypoints=web

      # Public events legacy API v1 route
      - traefik.http.routers.api_v1_client_legacy_public_community.rule=Host(`dev.resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_public_community.entrypoints=web

      # Public events legacy API v1 route 2
      - traefik.http.routers.api_v1_client_legacy_public2_community.rule=Host(`3rd.dev.resonite-communities.com`) && PathPrefix(`/v1`)
      - traefik.http.routers.api_v1_client_legacy_public2_community.entrypoints=web

      # Public events legacy API v2 route
      - traefik.http.routers.api_v2_client_legacy_public_community.rule=Host(`dev.resonite-communities.com`) && PathPrefix(`/v2`)
      - traefik.http.routers.api_v2_client_legacy_public_community.entrypoints=web
      - traefik.http.routers.api_v2_client_legacy_public_community.middlewares=cors

  web_client_community:
    build: ../..
    restart: always
    profiles:
      - client
    command: poetry run web_client
    depends_on:
      migrations_community:
        condition: service_completed_successfully
      database_community:
        condition: service_healthy
    ports:
      - '8001:8001'
    secrets:
      - database_url
      - discord_secret
      - secret
      - secret_key
      - sentry_dsn
    environment:
      - DATABASE_URL_FILE=/run/secrets/database_url
      - DISCORD_SECRET_FILE=/run/secrets/discord_secret
      - SECRET_FILE=/run/secrets/secret
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - SENTRY_DSN_FILE=/run/secrets/sentry_dsn
      - CACHE_URL=${CACHE_URL}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_REDIRECT_URL=${DISCORD_REDIRECT_URL}
      - PUBLIC_DOMAIN=${PUBLIC_DOMAIN}
      - PRIVATE_DOMAIN=${PRIVATE_DOMAIN}
    labels:
      - traefik.enable=true
      - traefik.http.routers.web_client_community.rule=Host(`dev.resonite-communities.com`)
      - traefik.http.routers.web_client_community.entrypoints=web

      # Public events legacy API route
      - traefik.http.routers.web_client_legacy_public_community.rule=Host(`3rd.dev.resonite-communities.com`)
      - traefik.http.routers.web_client_legacy_public_community.entrypoints=web

  mkdocs_community:
    build:
      context: ../..
      dockerfile: Dockerfile.mkdocs
    ports:
      - "8002:8000"
    profiles:
      - doc
    stdin_open: true
    tty: true
    labels:
      - traefik.enable=true
      - traefik.http.routers.docs.rule=Host(`docs.dev.resonite-communities.com`)
      - traefik.http.routers.docs.entrypoints=web

secrets:
  postgres_password:
    environment: POSTGRES_PASSWORD
  postgres_user:
    environment: POSTGRES_USER
  postgres_db:
    environment: POSTGRES_DB
  database_url:
    environment: DATABASE_URL
  discord_secret:
    environment: DISCORD_SECRET
  secret:
    environment: SECRET
  secret_key:
    environment: SECRET_KEY
  sentry_dsn:
    environment: SENTRY_DSN

volumes:
  postgres_data:
    driver: local
